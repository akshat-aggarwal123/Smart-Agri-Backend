"""
config.py
---------
Keep this file in sync with:
  • routes/api_routes.py  – field names in request models
  • whatever preprocessing you used at training time
"""

from pathlib import Path
import torch
import numpy as np

# ---------------------------------------------------------------------------
# Paths
# ---------------------------------------------------------------------------
BASE_DIR  = Path(__file__).resolve().parent
MODEL_DIR = BASE_DIR / "models"

MODEL_PATHS = {
    "crop":           MODEL_DIR / "crop_recommender_triplet.pt",
    "sustainability": MODEL_DIR / "sustainability_predictor.pt",
    "yield":          MODEL_DIR / "yield_predictor.pt",
}

# ---------------------------------------------------------------------------
# Feature lists (exact order used when fitting the models)
# ---------------------------------------------------------------------------
# Crop recommender (17 inputs = 10 numeric + 7 one‑hot crop flags)
CROP_FEATURES = [
    "n", "p", "k",
    "temperature_c", "humidity_pct", "soil_ph", "rainfall_mm",
    "soil_moisture_pct", "fertilizer_usage_kg", "pesticide_usage_kg",
    # one‑hot flags derived from crop_type
    "crop_rice", "crop_wheat", "crop_corn", "crop_sugarcane",
    "crop_pulses", "crop_cotton", "crop_other",
]

# Sustainability score (10 inputs = 4 environmental + 3 agricultural + 3 crop flags)
SUSTAINABILITY_FEATURES = [
    "temperature_c", "humidity_pct", "soil_ph", "rainfall_mm",
    "soil_moisture_pct", "fertilizer_usage_kg", "pesticide_usage_kg",
    "crop_rice", "crop_wheat", "crop_other",
]

# Yield predictor (6 numeric + 7 one‑hot crop flags = 13 total)
YIELD_FEATURES = [
    "soil_ph", "soil_moisture_pct", "temperature_c", "rainfall_mm",
    "fertilizer_usage_kg", "pesticide_usage_kg",
    # one‑hot crop flags
    "crop_rice", "crop_wheat", "crop_corn", "crop_sugarcane",
    "crop_pulses", "crop_cotton", "crop_other",
]

# ---------------------------------------------------------------------------
# Runtime flags
# ---------------------------------------------------------------------------
DEVICE    = "cuda" if torch.cuda.is_available() else "cpu"
LOG_LEVEL = "INFO"

# ---------------------------------------------------------------------------
# Real crop embeddings extracted from your trained model
# ---------------------------------------------------------------------------
CROP_EMBEDDINGS = {
    "rice": np.array([0.076408, -0.135020, -0.099934, 0.164550, 0.005851, 0.092310, -0.016885,
 -0.261117, 0.120314, 0.036219, 0.193953, 0.025138, 0.140044, 0.119932,
 0.041297, -0.002269, -0.096458, -0.269913, -0.189433, -0.017179,
 -0.215028, -0.007101, -0.288558, 0.147647, 0.063417, 0.005287, 0.139541,
 -0.136052, -0.232611, -0.008759, -0.049960, 0.216586, 0.047383, -0.287032,
 0.010080, -0.056669, -0.088406, -0.263983, 0.046213, 0.231396, 0.029637,
 0.058732, -0.075997, -0.027895, -0.035522, 0.118820, -0.042157, 0.005022,
 -0.135912, -0.033638, -0.010574, 0.156805, -0.274024, -0.151218,
 -0.106981, 0.048671, 0.101766, -0.090196, 0.066935, -0.002295, 0.136260,
 0.117862, -0.083651, 0.067519]),
    "wheat": np.array([-0.141765, 0.061233, 0.121972, 0.400992, 0.059164, 0.456667, -0.259034,
 -0.258504, 0.421316, 0.415799, 0.293599, 0.075401, 0.541898, 0.092913,
 0.338743, -0.151872, -0.108521, -0.147149, -0.103868, 0.204364, -0.110269,
 -0.028369, -0.248001, 0.046987, 0.011761, 0.001762, 0.188400, -0.329690,
 -0.184314, 0.111855, 0.121772, -0.052957, -0.235336, -0.131437, 0.280157,
 0.124970, -0.129224, -0.354368, 0.191926, 0.144791, 0.098273, -0.099788,
 -0.164350, 0.033081, -0.236872, -0.171264, -0.083765, 0.221550, -0.179769,
 0.003509, -0.024523, -0.065472, -0.372781, 0.006228, -0.175167, -0.009840,
 0.294815, -0.307673, -0.007793, 0.045039, 0.213314, 0.176678, 0.124320,
 0.175714]),
    "corn": np.array([-0.048463, -0.083841, 0.157216, 0.062583, -0.115956, 0.093383, -0.300639,
 -0.302980, 0.286661, 0.119323, -0.043832, -0.005661, 0.190994, 0.451892,
 -0.122809, -0.325864, -0.396002, -0.240607, -0.284710, -0.117915,
 -0.130096, 0.064957, 0.022427, 0.219622, -0.099198, 0.148773, 0.127985,
 -0.320832, -0.087362, 0.353111, 0.185296, 0.101476, 0.118721, -0.399811,
 -0.120791, 0.093278, -0.029108, -0.067997, -0.221568, 0.227369, 0.185694,
 0.159257, -0.170854, 0.191979, -0.199205, 0.310680, -0.172177, -0.237679,
 -0.332155, 0.200599, 0.136127, 0.065805, -0.567283, -0.187485, -0.268090,
 -0.039043, -0.151285, -0.096070, 0.223714, 0.228435, -0.189799, 0.116932,
 -0.023390, -0.067260]),
    "sugarcane": np.array([0.112705, -0.372581, -0.102856, 0.254289, -0.355314, 0.237030, -0.273112,
 -0.349694, 0.120203, -0.083125, 0.186525, 0.058390, 0.353990, 0.082854,
 -0.062552, 0.057412, -0.288083, -0.044705, -0.293826, 0.110913, -0.069607,
 -0.132027, 0.115226, 0.343662, -0.033029, 0.283317, 0.108435, -0.422909,
 -0.110992, -0.028217, -0.147272, 0.104378, 0.196099, -0.399460, -0.208926,
 0.035132, 0.091688, -0.099551, 0.126337, 0.433220, 0.238865, 0.281544,
 0.068829, 0.255216, 0.153329, 0.108907, 0.271439, -0.238196, -0.304753,
 0.030735, 0.069574, -0.082773, -0.163179, -0.063121, -0.315343, 0.206853,
 -0.143552, -0.112041, 0.452501, 0.081795, -0.134281, -0.153175, -0.209380,
 0.153258]),
    "pulses": np.array([-0.049333, -0.300528, -0.083138, 0.073123, -0.199752, 0.168408, 0.120624,
 0.010666, 0.096802, 0.188674, 0.233092, 0.322325, 0.290069, 0.289052,
 0.401746, -0.041341, 0.035424, -0.192929, -0.139099, 0.145008, 0.304164,
 0.074712, 0.055562, 0.001279, -0.319648, -0.130004, 0.297553, -0.417740,
 -0.012739, 0.163640, -0.101763, 0.073883, 0.140187, 0.309552, 0.312910,
 -0.138821, -0.263648, -0.342786, 0.357047, -0.071302, 0.220804, 0.284015,
 0.223567, 0.255900, 0.053788, 0.028250, 0.086918, 0.655530, -0.293024,
 -0.268965, -0.008112, 0.197514, -0.550001, -0.261121, 0.151618, 0.354177,
 0.161767, -0.047561, 0.209904, 0.032095, 0.488058, 0.005455, -0.007919,
 0.093303]),
    "cotton": np.array([-0.036253, 0.196608, 0.083928, 0.248002, -0.064564, 0.110284, -0.099081,
 -0.286838, 0.231294, 0.282366, 0.192149, -0.022103, 0.277771, 0.115433,
 -0.068225, 0.117897, 0.197104, -0.297013, -0.403861, 0.080593, -0.005790,
 -0.169330, -0.126579, 0.042811, 0.021923, 0.061421, 0.124730, -0.238524,
 -0.199284, 0.082303, -0.280564, 0.212650, 0.060398, -0.338137, 0.078861,
 -0.041137, -0.099878, -0.241895, 0.131205, 0.284442, 0.043014, 0.027335,
 -0.104606, 0.045936, 0.049278, -0.069531, -0.032220, -0.214731, 0.134078,
 -0.109382, 0.150617, -0.033293, -0.343307, -0.028740, -0.274935, 0.024725,
 0.144508, 0.055507, -0.053293, 0.072577, 0.231822, 0.239660, 0.131746,
 0.210715]),
    "other": np.array([-0.202202, 0.008292, -0.031157, 0.077847, -0.049775, 0.174956, -0.011357,
 -0.147578, 0.124442, 0.068127, 0.302461, 0.127446, 0.288553, -0.077055,
 0.069771, -0.050419, -0.007663, -0.139526, -0.237861, -0.067706,
 -0.075613, 0.025138, -0.062859, 0.165872, -0.088704, 0.014873, -0.065789,
 -0.142313, -0.085401, 0.129457, -0.008954, -0.012347, -0.096366,
 -0.185599, 0.181538, -0.121975, 0.071241, -0.331963, -0.017200, 0.295162,
 0.146309, 0.078859, -0.012183, 0.054145, -0.073366, 0.035915, 0.056952,
 -0.066233, -0.046927, -0.114592, 0.161771, -0.066575, -0.240006, 0.103474,
 -0.229878, 0.234965, 0.155907, -0.049050, -0.163975, -0.022600, 0.251506,
 0.030650, 0.247446, 0.055193]),
}

def get_crop_embeddings():
    """Return the crop embeddings dictionary"""
    return CROP_EMBEDDINGS